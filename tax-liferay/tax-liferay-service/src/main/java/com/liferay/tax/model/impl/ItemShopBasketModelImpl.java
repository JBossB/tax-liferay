/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.liferay.tax.model.impl;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.tax.model.ItemShopBasket;
import com.liferay.tax.model.ItemShopBasketModel;
import com.liferay.tax.model.ItemShopBasketSoap;

import java.io.Serializable;

import java.lang.reflect.Constructor;
import java.lang.reflect.InvocationHandler;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Collections;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the ItemShopBasket service. Represents a row in the &quot;jb_ItemShopBasket&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>ItemShopBasketModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link ItemShopBasketImpl}.
 * </p>
 *
 * @author jbaeza
 * @see ItemShopBasketImpl
 * @generated
 */
@JSON(strict = true)
public class ItemShopBasketModelImpl
	extends BaseModelImpl<ItemShopBasket> implements ItemShopBasketModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a item shop basket model instance should use the <code>ItemShopBasket</code> interface instead.
	 */
	public static final String TABLE_NAME = "jb_ItemShopBasket";

	public static final Object[][] TABLE_COLUMNS = {
		{"itemShopBasketId", Types.BIGINT}, {"shopBasketId", Types.BIGINT},
		{"name", Types.VARCHAR}, {"imported", Types.BOOLEAN},
		{"exempt", Types.BOOLEAN}, {"price", Types.DOUBLE},
		{"active_", Types.BOOLEAN}, {"amount", Types.BIGINT},
		{"tax", Types.DOUBLE}, {"total", Types.DOUBLE}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("itemShopBasketId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("shopBasketId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("name", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("imported", Types.BOOLEAN);
		TABLE_COLUMNS_MAP.put("exempt", Types.BOOLEAN);
		TABLE_COLUMNS_MAP.put("price", Types.DOUBLE);
		TABLE_COLUMNS_MAP.put("active_", Types.BOOLEAN);
		TABLE_COLUMNS_MAP.put("amount", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("tax", Types.DOUBLE);
		TABLE_COLUMNS_MAP.put("total", Types.DOUBLE);
	}

	public static final String TABLE_SQL_CREATE =
		"create table jb_ItemShopBasket (itemShopBasketId LONG not null primary key,shopBasketId LONG,name VARCHAR(75) null,imported BOOLEAN,exempt BOOLEAN,price DOUBLE,active_ BOOLEAN,amount LONG,tax DOUBLE,total DOUBLE)";

	public static final String TABLE_SQL_DROP = "drop table jb_ItemShopBasket";

	public static final String ORDER_BY_JPQL =
		" ORDER BY itemShopBasket.name ASC";

	public static final String ORDER_BY_SQL =
		" ORDER BY jb_ItemShopBasket.name ASC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
		_entityCacheEnabled = entityCacheEnabled;
	}

	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
		_finderCacheEnabled = finderCacheEnabled;
	}

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static ItemShopBasket toModel(ItemShopBasketSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		ItemShopBasket model = new ItemShopBasketImpl();

		model.setItemShopBasketId(soapModel.getItemShopBasketId());
		model.setShopBasketId(soapModel.getShopBasketId());
		model.setName(soapModel.getName());
		model.setImported(soapModel.isImported());
		model.setExempt(soapModel.isExempt());
		model.setPrice(soapModel.getPrice());
		model.setActive(soapModel.isActive());
		model.setAmount(soapModel.getAmount());
		model.setTax(soapModel.getTax());
		model.setTotal(soapModel.getTotal());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<ItemShopBasket> toModels(
		ItemShopBasketSoap[] soapModels) {

		if (soapModels == null) {
			return null;
		}

		List<ItemShopBasket> models = new ArrayList<ItemShopBasket>(
			soapModels.length);

		for (ItemShopBasketSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public ItemShopBasketModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _itemShopBasketId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setItemShopBasketId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _itemShopBasketId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return ItemShopBasket.class;
	}

	@Override
	public String getModelClassName() {
		return ItemShopBasket.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<ItemShopBasket, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		for (Map.Entry<String, Function<ItemShopBasket, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<ItemShopBasket, Object> attributeGetterFunction =
				entry.getValue();

			attributes.put(
				attributeName,
				attributeGetterFunction.apply((ItemShopBasket)this));
		}

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<ItemShopBasket, Object>>
			attributeSetterBiConsumers = getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<ItemShopBasket, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(ItemShopBasket)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<ItemShopBasket, Object>>
		getAttributeGetterFunctions() {

		return _attributeGetterFunctions;
	}

	public Map<String, BiConsumer<ItemShopBasket, Object>>
		getAttributeSetterBiConsumers() {

		return _attributeSetterBiConsumers;
	}

	private static Function<InvocationHandler, ItemShopBasket>
		_getProxyProviderFunction() {

		Class<?> proxyClass = ProxyUtil.getProxyClass(
			ItemShopBasket.class.getClassLoader(), ItemShopBasket.class,
			ModelWrapper.class);

		try {
			Constructor<ItemShopBasket> constructor =
				(Constructor<ItemShopBasket>)proxyClass.getConstructor(
					InvocationHandler.class);

			return invocationHandler -> {
				try {
					return constructor.newInstance(invocationHandler);
				}
				catch (ReflectiveOperationException
							reflectiveOperationException) {

					throw new InternalError(reflectiveOperationException);
				}
			};
		}
		catch (NoSuchMethodException noSuchMethodException) {
			throw new InternalError(noSuchMethodException);
		}
	}

	private static final Map<String, Function<ItemShopBasket, Object>>
		_attributeGetterFunctions;
	private static final Map<String, BiConsumer<ItemShopBasket, Object>>
		_attributeSetterBiConsumers;

	static {
		Map<String, Function<ItemShopBasket, Object>> attributeGetterFunctions =
			new LinkedHashMap<String, Function<ItemShopBasket, Object>>();
		Map<String, BiConsumer<ItemShopBasket, ?>> attributeSetterBiConsumers =
			new LinkedHashMap<String, BiConsumer<ItemShopBasket, ?>>();

		attributeGetterFunctions.put(
			"itemShopBasketId", ItemShopBasket::getItemShopBasketId);
		attributeSetterBiConsumers.put(
			"itemShopBasketId",
			(BiConsumer<ItemShopBasket, Long>)
				ItemShopBasket::setItemShopBasketId);
		attributeGetterFunctions.put(
			"shopBasketId", ItemShopBasket::getShopBasketId);
		attributeSetterBiConsumers.put(
			"shopBasketId",
			(BiConsumer<ItemShopBasket, Long>)ItemShopBasket::setShopBasketId);
		attributeGetterFunctions.put("name", ItemShopBasket::getName);
		attributeSetterBiConsumers.put(
			"name",
			(BiConsumer<ItemShopBasket, String>)ItemShopBasket::setName);
		attributeGetterFunctions.put("imported", ItemShopBasket::getImported);
		attributeSetterBiConsumers.put(
			"imported",
			(BiConsumer<ItemShopBasket, Boolean>)ItemShopBasket::setImported);
		attributeGetterFunctions.put("exempt", ItemShopBasket::getExempt);
		attributeSetterBiConsumers.put(
			"exempt",
			(BiConsumer<ItemShopBasket, Boolean>)ItemShopBasket::setExempt);
		attributeGetterFunctions.put("price", ItemShopBasket::getPrice);
		attributeSetterBiConsumers.put(
			"price",
			(BiConsumer<ItemShopBasket, Double>)ItemShopBasket::setPrice);
		attributeGetterFunctions.put("active", ItemShopBasket::getActive);
		attributeSetterBiConsumers.put(
			"active",
			(BiConsumer<ItemShopBasket, Boolean>)ItemShopBasket::setActive);
		attributeGetterFunctions.put("amount", ItemShopBasket::getAmount);
		attributeSetterBiConsumers.put(
			"amount",
			(BiConsumer<ItemShopBasket, Long>)ItemShopBasket::setAmount);
		attributeGetterFunctions.put("tax", ItemShopBasket::getTax);
		attributeSetterBiConsumers.put(
			"tax", (BiConsumer<ItemShopBasket, Double>)ItemShopBasket::setTax);
		attributeGetterFunctions.put("total", ItemShopBasket::getTotal);
		attributeSetterBiConsumers.put(
			"total",
			(BiConsumer<ItemShopBasket, Double>)ItemShopBasket::setTotal);

		_attributeGetterFunctions = Collections.unmodifiableMap(
			attributeGetterFunctions);
		_attributeSetterBiConsumers = Collections.unmodifiableMap(
			(Map)attributeSetterBiConsumers);
	}

	@JSON
	@Override
	public long getItemShopBasketId() {
		return _itemShopBasketId;
	}

	@Override
	public void setItemShopBasketId(long itemShopBasketId) {
		_itemShopBasketId = itemShopBasketId;
	}

	@JSON
	@Override
	public long getShopBasketId() {
		return _shopBasketId;
	}

	@Override
	public void setShopBasketId(long shopBasketId) {
		_shopBasketId = shopBasketId;
	}

	@JSON
	@Override
	public String getName() {
		if (_name == null) {
			return "";
		}
		else {
			return _name;
		}
	}

	@Override
	public void setName(String name) {
		_name = name;
	}

	@JSON
	@Override
	public boolean getImported() {
		return _imported;
	}

	@JSON
	@Override
	public boolean isImported() {
		return _imported;
	}

	@Override
	public void setImported(boolean imported) {
		_imported = imported;
	}

	@JSON
	@Override
	public boolean getExempt() {
		return _exempt;
	}

	@JSON
	@Override
	public boolean isExempt() {
		return _exempt;
	}

	@Override
	public void setExempt(boolean exempt) {
		_exempt = exempt;
	}

	@JSON
	@Override
	public Double getPrice() {
		return _price;
	}

	@Override
	public void setPrice(Double price) {
		_price = price;
	}

	@JSON
	@Override
	public boolean getActive() {
		return _active;
	}

	@JSON
	@Override
	public boolean isActive() {
		return _active;
	}

	@Override
	public void setActive(boolean active) {
		_active = active;
	}

	@JSON
	@Override
	public long getAmount() {
		return _amount;
	}

	@Override
	public void setAmount(long amount) {
		_amount = amount;
	}

	@JSON
	@Override
	public Double getTax() {
		return _tax;
	}

	@Override
	public void setTax(Double tax) {
		_tax = tax;
	}

	@JSON
	@Override
	public Double getTotal() {
		return _total;
	}

	@Override
	public void setTotal(Double total) {
		_total = total;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			0, ItemShopBasket.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public ItemShopBasket toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, ItemShopBasket>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		ItemShopBasketImpl itemShopBasketImpl = new ItemShopBasketImpl();

		itemShopBasketImpl.setItemShopBasketId(getItemShopBasketId());
		itemShopBasketImpl.setShopBasketId(getShopBasketId());
		itemShopBasketImpl.setName(getName());
		itemShopBasketImpl.setImported(isImported());
		itemShopBasketImpl.setExempt(isExempt());
		itemShopBasketImpl.setPrice(getPrice());
		itemShopBasketImpl.setActive(isActive());
		itemShopBasketImpl.setAmount(getAmount());
		itemShopBasketImpl.setTax(getTax());
		itemShopBasketImpl.setTotal(getTotal());

		itemShopBasketImpl.resetOriginalValues();

		return itemShopBasketImpl;
	}

	@Override
	public int compareTo(ItemShopBasket itemShopBasket) {
		int value = 0;

		value = getName().compareTo(itemShopBasket.getName());

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object object) {
		if (this == object) {
			return true;
		}

		if (!(object instanceof ItemShopBasket)) {
			return false;
		}

		ItemShopBasket itemShopBasket = (ItemShopBasket)object;

		long primaryKey = itemShopBasket.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return _entityCacheEnabled;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return _finderCacheEnabled;
	}

	@Override
	public void resetOriginalValues() {
	}

	@Override
	public CacheModel<ItemShopBasket> toCacheModel() {
		ItemShopBasketCacheModel itemShopBasketCacheModel =
			new ItemShopBasketCacheModel();

		itemShopBasketCacheModel.itemShopBasketId = getItemShopBasketId();

		itemShopBasketCacheModel.shopBasketId = getShopBasketId();

		itemShopBasketCacheModel.name = getName();

		String name = itemShopBasketCacheModel.name;

		if ((name != null) && (name.length() == 0)) {
			itemShopBasketCacheModel.name = null;
		}

		itemShopBasketCacheModel.imported = isImported();

		itemShopBasketCacheModel.exempt = isExempt();

		Double price = getPrice();

		if (price != null) {
			itemShopBasketCacheModel.price = price;
		}

		itemShopBasketCacheModel.active = isActive();

		itemShopBasketCacheModel.amount = getAmount();

		Double tax = getTax();

		if (tax != null) {
			itemShopBasketCacheModel.tax = tax;
		}

		Double total = getTotal();

		if (total != null) {
			itemShopBasketCacheModel.total = total;
		}

		return itemShopBasketCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<ItemShopBasket, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(4 * attributeGetterFunctions.size()) + 2);

		sb.append("{");

		for (Map.Entry<String, Function<ItemShopBasket, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<ItemShopBasket, Object> attributeGetterFunction =
				entry.getValue();

			sb.append(attributeName);
			sb.append("=");
			sb.append(attributeGetterFunction.apply((ItemShopBasket)this));
			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		Map<String, Function<ItemShopBasket, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 4);

		sb.append("<model><model-name>");
		sb.append(getModelClassName());
		sb.append("</model-name>");

		for (Map.Entry<String, Function<ItemShopBasket, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<ItemShopBasket, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("<column><column-name>");
			sb.append(attributeName);
			sb.append("</column-name><column-value><![CDATA[");
			sb.append(attributeGetterFunction.apply((ItemShopBasket)this));
			sb.append("]]></column-value></column>");
		}

		sb.append("</model>");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function<InvocationHandler, ItemShopBasket>
			_escapedModelProxyProviderFunction = _getProxyProviderFunction();

	}

	private static boolean _entityCacheEnabled;
	private static boolean _finderCacheEnabled;

	private long _itemShopBasketId;
	private long _shopBasketId;
	private String _name;
	private boolean _imported;
	private boolean _exempt;
	private Double _price;
	private boolean _active;
	private long _amount;
	private Double _tax;
	private Double _total;
	private ItemShopBasket _escapedModel;

}